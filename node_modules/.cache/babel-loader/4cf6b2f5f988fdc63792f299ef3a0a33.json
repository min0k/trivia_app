{"ast":null,"code":"var _jsxFileName = \"/Users/mino/Desktop/scrimba_project/trivia_app/src/components/QuizPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Card from \"./Card\";\nimport Footer from \"./Footer\"; // Hookup answers to the questions, then figure out how to make random\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuizPage() {\n  _s();\n\n  const [trivia, setTrivia] = React.useState([]); // const [answers, setAnswers] = React.useState([]);\n\n  console.log(\"re-rendered\");\n\n  function decoder(input) {\n    return input.replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\");\n  }\n\n  function createTrivia(obj) {\n    console.log(obj);\n    const decodedQuestion = decoder(obj.question);\n    const decodedCorrectAnswer = decoder(obj.correct_answer);\n    const decodedIncorrectAnswers = obj.incorrect_answers.map(e => {\n      return decoder(e);\n    });\n    const newTriviaQuestions = obj.map(e => {\n      return {\n        question: decodedQuestion,\n        correctAnswer: decodedCorrectAnswer,\n        wrongAnswers: decodedIncorrectAnswers,\n        category: obj.category,\n        difficulty: obj.difficulty\n      };\n    });\n    return newTriviaQuestions;\n  }\n\n  React.useEffect(() => {\n    async function getTrivia() {\n      try {\n        const response = await fetch(\"https://opentdb.com/api.php?amount=5&category=31&type=multiple\");\n        const data = await response.json();\n        setTrivia(createTrivia(data.results)); //old code\n        // data.results.forEach((e) => {\n        //   setTrivia((prevValue) => [...prevValue, createTrivia(e)]);\n        // });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    getTrivia();\n  }, []);\n  const TriviaCards = trivia.map(e => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      question: e.question\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [TriviaCards, /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuizPage, \"5bEC3DjNCW27AXzP2i74x//nXTc=\");\n\n_c = QuizPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"sources":["/Users/mino/Desktop/scrimba_project/trivia_app/src/components/QuizPage.js"],"names":["React","nanoid","Card","Footer","QuizPage","trivia","setTrivia","useState","console","log","decoder","input","replace","createTrivia","obj","decodedQuestion","question","decodedCorrectAnswer","correct_answer","decodedIncorrectAnswers","incorrect_answers","map","e","newTriviaQuestions","correctAnswer","wrongAnswers","category","difficulty","useEffect","getTrivia","response","fetch","data","json","results","err","TriviaCards"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAA5B,CADiC,CAGjC;;AAEFC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AAEE,WAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,WAAOA,KAAK,CAACC,OAAN,CAAc,SAAd,EAAyB,GAAzB,EAA8BA,OAA9B,CAAsC,SAAtC,EAAiD,GAAjD,CAAP;AACD;;AAED,WAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzBN,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACA,UAAMC,eAAe,GAAGL,OAAO,CAACI,GAAG,CAACE,QAAL,CAA/B;AACA,UAAMC,oBAAoB,GAAGP,OAAO,CAACI,GAAG,CAACI,cAAL,CAApC;AACA,UAAMC,uBAAuB,GAAGL,GAAG,CAACM,iBAAJ,CAAsBC,GAAtB,CAA2BC,CAAD,IAAO;AAC/D,aAAOZ,OAAO,CAACY,CAAD,CAAd;AACD,KAF+B,CAAhC;AAGA,UAAMC,kBAAkB,GAAGT,GAAG,CAACO,GAAJ,CAAQC,CAAC,IAAI;AACtC,aAAO;AACLN,QAAAA,QAAQ,EAAED,eADL;AAELS,QAAAA,aAAa,EAAEP,oBAFV;AAGLQ,QAAAA,YAAY,EAAEN,uBAHT;AAILO,QAAAA,QAAQ,EAAEZ,GAAG,CAACY,QAJT;AAKLC,QAAAA,UAAU,EAAEb,GAAG,CAACa;AALX,OAAP;AAOD,KAR0B,CAA3B;AAUA,WAAOJ,kBAAP;AACD;;AAGDvB,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpB,mBAAeC,SAAf,GAA2B;AACzB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAD0B,CAA5B;AAGA,cAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA3B,QAAAA,SAAS,CAACO,YAAY,CAACmB,IAAI,CAACE,OAAN,CAAb,CAAT,CANE,CAQF;AACA;AACA;AACA;AAED,OAbD,CAaE,OAAOC,GAAP,EAAY;AACZ3B,QAAAA,OAAO,CAACC,GAAR,CAAY0B,GAAZ;AACD;AACF;;AAEDN,IAAAA,SAAS;AACV,GArBD,EAqBG,EArBH;AAuBA,QAAMO,WAAW,GAAG/B,MAAM,CAACgB,GAAP,CAAYC,CAAD,IAAO;AACpC,wBAAO,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEA,CAAC,CAACN;AAAlB,OAAiCf,MAAM,EAAvC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFmB,CAApB;AAIA,sBACE;AAAA,eACGmC,WADH,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAjEuBhC,Q;;KAAAA,Q","sourcesContent":["import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Card from \"./Card\";\nimport Footer from \"./Footer\";\n\n// Hookup answers to the questions, then figure out how to make random\n\nexport default function QuizPage() {\n  const [trivia, setTrivia] = React.useState([]);\n\n  // const [answers, setAnswers] = React.useState([]);\n\nconsole.log(\"re-rendered\");\n\n  function decoder(input) {\n    return input.replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\");\n  }\n\n  function createTrivia(obj) {\n    console.log(obj);\n    const decodedQuestion = decoder(obj.question);\n    const decodedCorrectAnswer = decoder(obj.correct_answer);\n    const decodedIncorrectAnswers = obj.incorrect_answers.map((e) => {\n      return decoder(e);\n    });\n    const newTriviaQuestions = obj.map(e => {\n      return {\n        question: decodedQuestion,\n        correctAnswer: decodedCorrectAnswer,\n        wrongAnswers: decodedIncorrectAnswers,\n        category: obj.category,\n        difficulty: obj.difficulty,\n      }\n    })\n\n    return newTriviaQuestions\n  }\n\n\n  React.useEffect(() => {\n    async function getTrivia() {\n      try {\n        const response = await fetch(\n          \"https://opentdb.com/api.php?amount=5&category=31&type=multiple\"\n        );\n        const data = await response.json();\n\n        setTrivia(createTrivia(data.results));\n\n        //old code\n        // data.results.forEach((e) => {\n        //   setTrivia((prevValue) => [...prevValue, createTrivia(e)]);\n        // });\n\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    getTrivia();\n  }, []);\n\n  const TriviaCards = trivia.map((e) => {\n    return <Card question={e.question} key={nanoid()} />;\n  });\n\n  return (\n    <div>\n      {TriviaCards}\n      <Footer />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}