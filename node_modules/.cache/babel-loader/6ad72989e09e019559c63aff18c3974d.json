{"ast":null,"code":"var _jsxFileName = \"/Users/mino/Desktop/scrimba_project/trivia_app/src/components/QuizPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Card from \"./Card\";\nimport Footer from \"./Footer\"; // Hookup answers to the questions, then figure out how to make random\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuizPage() {\n  _s();\n\n  const [trivia, setTrivia] = React.useState([]);\n  React.useEffect(() => {\n    async function getTrivia() {\n      try {\n        const response = await fetch(\"https://opentdb.com/api.php?amount=5&category=31&type=multiple\");\n        const data = await response.json();\n        setTrivia(createTrivia(data.results)); //old code\n        // data.results.forEach((e) => {\n        //   setTrivia((prevValue) => [...prevValue, createTrivia(e)]);\n        // });\n      } catch (err) {\n        console.log(err);\n      }\n    } // const [answers, setAnswers] = React.useState([]);\n\n\n    console.log(\"re-rendered\");\n\n    function decoder(input) {\n      return input.replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\");\n    }\n\n    function createTrivia(obj) {\n      const newTriviaQuestions = obj.map(e => {\n        const decodedQuestion = decoder(e.question);\n        const decodedCorrectAnswer = decoder(e.correct_answer);\n        const decodedIncorrectAnswers = e.incorrect_answers.map(e => {\n          return decoder(e);\n        });\n        return {\n          id: nanoid(),\n          question: decodedQuestion,\n          correctAnswer: decodedCorrectAnswer,\n          wrongAnswers: decodedIncorrectAnswers,\n          category: e.category,\n          difficulty: e.difficulty\n        };\n      });\n      return newTriviaQuestions;\n    }\n\n    getTrivia();\n  }, []);\n  const TriviaCards = trivia.map(e => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      question: e.question\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  });\n  console.log(trivia);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [TriviaCards, /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuizPage, \"5bEC3DjNCW27AXzP2i74x//nXTc=\");\n\n_c = QuizPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"sources":["/Users/mino/Desktop/scrimba_project/trivia_app/src/components/QuizPage.js"],"names":["React","nanoid","Card","Footer","QuizPage","trivia","setTrivia","useState","useEffect","getTrivia","response","fetch","data","json","createTrivia","results","err","console","log","decoder","input","replace","obj","newTriviaQuestions","map","e","decodedQuestion","question","decodedCorrectAnswer","correct_answer","decodedIncorrectAnswers","incorrect_answers","id","correctAnswer","wrongAnswers","category","difficulty","TriviaCards"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAA5B;AAEAP,EAAAA,KAAK,CAACQ,SAAN,CAAgB,MAAM;AACpB,mBAAeC,SAAf,GAA2B;AACzB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gEAD0B,CAA5B;AAGA,cAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAP,QAAAA,SAAS,CAACQ,YAAY,CAACF,IAAI,CAACG,OAAN,CAAb,CAAT,CANE,CAQF;AACA;AACA;AACA;AACD,OAZD,CAYE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KAjBmB,CAmBtB;;;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AAEA,aAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,aAAOA,KAAK,CAACC,OAAN,CAAc,SAAd,EAAyB,GAAzB,EAA8BA,OAA9B,CAAsC,SAAtC,EAAiD,GAAjD,CAAP;AACD;;AAED,aAASP,YAAT,CAAsBQ,GAAtB,EAA2B;AACzB,YAAMC,kBAAkB,GAAGD,GAAG,CAACE,GAAJ,CAASC,CAAD,IAAO;AACxC,cAAMC,eAAe,GAAGP,OAAO,CAACM,CAAC,CAACE,QAAH,CAA/B;AACA,cAAMC,oBAAoB,GAAGT,OAAO,CAACM,CAAC,CAACI,cAAH,CAApC;AACA,cAAMC,uBAAuB,GAAGL,CAAC,CAACM,iBAAF,CAAoBP,GAApB,CAAyBC,CAAD,IAAO;AAC7D,iBAAON,OAAO,CAACM,CAAD,CAAd;AACD,SAF+B,CAAhC;AAGA,eAAO;AACLO,UAAAA,EAAE,EAAE/B,MAAM,EADL;AAEL0B,UAAAA,QAAQ,EAAED,eAFL;AAGLO,UAAAA,aAAa,EAAEL,oBAHV;AAILM,UAAAA,YAAY,EAAEJ,uBAJT;AAKLK,UAAAA,QAAQ,EAAEV,CAAC,CAACU,QALP;AAMLC,UAAAA,UAAU,EAAEX,CAAC,CAACW;AANT,SAAP;AASD,OAf0B,CAA3B;AAiBA,aAAOb,kBAAP;AACD;;AAICd,IAAAA,SAAS;AACV,GAnDD,EAmDG,EAnDH;AAqDA,QAAM4B,WAAW,GAAGhC,MAAM,CAACmB,GAAP,CAAYC,CAAD,IAAO;AACpC,wBAAO,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEA,CAAC,CAACE;AAAlB,OAAiC1B,MAAM,EAAvC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFmB,CAApB;AAIAgB,EAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AAEA,sBACE;AAAA,eACGgC,WADH,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GApEuBjC,Q;;KAAAA,Q","sourcesContent":["import React from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Card from \"./Card\";\nimport Footer from \"./Footer\";\n\n// Hookup answers to the questions, then figure out how to make random\n\nexport default function QuizPage() {\n  const [trivia, setTrivia] = React.useState([]);\n\n  React.useEffect(() => {\n    async function getTrivia() {\n      try {\n        const response = await fetch(\n          \"https://opentdb.com/api.php?amount=5&category=31&type=multiple\"\n        );\n        const data = await response.json();\n\n        setTrivia(createTrivia(data.results));\n\n        //old code\n        // data.results.forEach((e) => {\n        //   setTrivia((prevValue) => [...prevValue, createTrivia(e)]);\n        // });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n  // const [answers, setAnswers] = React.useState([]);\n\n  console.log(\"re-rendered\");\n\n  function decoder(input) {\n    return input.replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\");\n  }\n\n  function createTrivia(obj) {\n    const newTriviaQuestions = obj.map((e) => {\n      const decodedQuestion = decoder(e.question);\n      const decodedCorrectAnswer = decoder(e.correct_answer);\n      const decodedIncorrectAnswers = e.incorrect_answers.map((e) => {\n        return decoder(e);\n      });\n      return {\n        id: nanoid(),\n        question: decodedQuestion,\n        correctAnswer: decodedCorrectAnswer,\n        wrongAnswers: decodedIncorrectAnswers,\n        category: e.category,\n        difficulty: e.difficulty,\n      };\n\n    });\n\n    return newTriviaQuestions;\n  }\n\n\n\n    getTrivia();\n  }, []);\n\n  const TriviaCards = trivia.map((e) => {\n    return <Card question={e.question} key={nanoid()} />;\n  });\n\n  console.log(trivia);\n\n  return (\n    <div>\n      {TriviaCards}\n      <Footer />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}